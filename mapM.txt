Option Explicit

'********************************************************************
'   関数型プログラム
'   Function applyFun           関数適用関数
'   Function setParam           関数に引数を代入
'   Function applyFun2by2
'   Function setParam2by2
'********************************************************************
'関数適用関数  引数に対して関数を適用する   関数はNullをプレースホルダとした簡易Bind式
' applyFun(x     ,  f             )  ->  f(x)
' applyFun(x     , (f)            )  ->  f(x)
' applyFun(x     , (f, Null)      )  ->  f(x)
' applyFun(x     , (f, a)         )  ->  f(a, x)
' applyFun(x     , (f, a, Null)   )  ->  f(a, x)
' applyFun(x     , (f, Null, b)   )  ->  f(x, b)
' applyFun((x, y), (f, Null, Null))  ->  f(x, y)
Function applyFun(ByRef param As Variant, ByRef func As Variant) As Variant
    If IsArray(func) Then
        Select Case 1 + UBound(func) - LBound(func)
        Case 1  '(f)
            applyFun = simple_invoke(func(LBound(func)), param)
        Case 2  ' (f, Null) または (f, a)
            If IsNull(func(1 + LBound(func))) Then      ' (f, Null)
                applyFun = simple_invoke(func(LBound(func)), param)
            Else                                        ' (f, a)
                applyFun = simple_invoke(func(LBound(func)), func(1 + LBound(func)), param)
            End If
        Case 3  ' (f, a, Null) または (f, a, b) または (f, Null, b) または (f, Null, Null)
            If IsNull(func(1 + LBound(func))) = False Then
                If IsNull(func(2 + LBound(func))) = False Then          '(f, a, b)
                    applyFun = simple_invoke(func(LBound(func)), func(1 + LBound(func)), func(2 + LBound(func)))
                Else                                                    '(f, a, Null)
                    applyFun = simple_invoke(func(LBound(func)), func(1 + LBound(func)), param)
                End If
            ElseIf IsNull(func(2 + LBound(func))) = False Then          '(f, Null, b)
                applyFun = simple_invoke(func(LBound(func)), param, func(2 + LBound(func)))
            Else                                                        '(f, Null, Null)
                applyFun = simple_invoke(func(LBound(func)), param(LBound(param)), param(1 + LBound(param)))
            End If
        Case Else
           
        End Select
    Else
        applyFun = simple_invoke(func, param)
    End If
End Function
    Function p_applyFun() As Long
        p_applyFun = VBA.CLng(AddressOf applyFun)
    End Function

'関数に引数を代入する関数
' setParam(f              , x     )  ->  f(x)
' setParam((f)            , x     )  ->  f(x)
' setParam((f, Null)      , x     )  ->  f(x)
' setParam((f, a)         , x     )  ->  f(a, x)
' setParam((f, a, Null)   , x     )  ->  f(a, x)
' setParam((f, Null, b)   , x     )  ->  f(x, b)
' setParam((f, Null, Null), (x, y))  ->  f(x, y)
Function setParam(ByRef func As Variant, ByRef param As Variant) As Variant
    setParam = applyFun(param, func)
End Function
    Function p_setParam() As Long
        p_setParam = VBA.CLng(AddressOf setParam)
    End Function

'((x, y), (f1, f2))  に対して  Array(f1(x, y), f2(x, y))　　　 を返す
Function applyFun2by2(ByRef params As Variant, ByRef funcs As Variant) As Variant
    applyFun2by2 = Array( _
          simple_invoke(funcs(LBound(funcs)), params(LBound(params)), params(1 + LBound(params))) _
        , simple_invoke(funcs(1 + LBound(funcs)), params(LBound(params)), params(1 + LBound(params))) _
                     )
End Function
    Function p_applyFun2by2() As Long
        p_applyFun2by2 = VBA.CLng(AddressOf applyFun2by2)
    End Function

'((f1, f2), (x, y))  に対して  Array(f1(x, y), f2(x, y))     を返す
Function setParam2by2(ByRef funcs As Variant, ByRef params As Variant) As Variant
    setParam2by2 = applyFun2by2(params, funcs)
End Function
    Function p_setParam2by2() As Long
        p_setParam2by2 = VBA.CLng(AddressOf setParam2by2)
    End Function


'********************************************************************
'   要素アクセス
'   Function firstArg           1番目の引数
'   Function secondArg          2番目の引数
'********************************************************************
'1番目の引数
Function firstArg(ByRef a As Variant, ByRef b As Variant) As Variant
    firstArg = a
End Function
    Function p_firstArg() As Long
        p_firstArg = VBA.CLng(AddressOf firstArg)
    End Function

'2番目の引数
Function secondArg(ByRef a As Variant, ByRef b As Variant) As Variant
    secondArg = b
End Function
    Function p_secondArg() As Long
        p_secondArg = VBA.CLng(AddressOf secondArg)
    End Function


'********************************************************************
'     ファンクタ等
'   Function expN           指数関数
'   Function logN           対数関数
'   Function plus           加算
'   Function minus          減算
'   Function mult           乗算
'   Function divide         除算
'   Function poly           多項式
'   Function min            min
'   Function max            max
'   Function equal          述語 Equal
'   Function notEqual       述語 Not Equal
'   Function less           述語 less
'   Function great          述語 great
'********************************************************************
'指数関数
Function expN(ByRef elem As Variant, ByRef dummy As Variant) As Variant
    expN = Exp(elem)
End Function
    Function p_exp() As Long
        p_exp = VBA.CLng(AddressOf expN)
    End Function

'対数関数
Function logN(ByRef elem As Variant, Optional ByRef dummy As Variant) As Variant
    logN = Log(elem)
End Function
    Function p_log() As Long
        p_log = VBA.CLng(AddressOf logN)
    End Function

'加算
Function plus(ByRef elem As Variant, ByRef a As Variant) As Variant
    If IsNumeric(elem) And IsNumeric(a) Then
        plus = elem + a
    End If
End Function
    Function p_plus() As Long
        p_plus = VBA.CLng(AddressOf plus)
    End Function

'減算
Function minus(ByRef elem As Variant, ByRef a As Variant) As Variant
    If IsNumeric(elem) And IsNumeric(a) Then
        minus = elem - a
    End If
End Function
    Function p_minus() As Long
        p_minus = VBA.CLng(AddressOf minus)
    End Function

'乗算
Function mult(ByRef elem As Variant, ByRef a As Variant) As Variant
    If IsNumeric(elem) And IsNumeric(a) Then
        mult = elem * a
    End If
End Function
    Function p_mult() As Long
        p_mult = VBA.CLng(AddressOf mult)
    End Function

'除算
Function divide(ByRef elem As Variant, ByRef a As Variant) As Variant
    If IsNumeric(elem) And IsNumeric(a) Then
        divide = elem / a
    End If
End Function
    Function p_divide() As Long
        p_divide = VBA.CLng(AddressOf divide)
    End Function

'多項式　（係数は高次->低次）
Function poly(ByRef x As Variant, ByRef coef As Variant) As Variant
    poly = foldr1(p_plus, zipWith(p_mult, coef, scanr(p_mult, 1, repeat(x, sizeof(coef) - 1))))
End Function
    Function p_poly() As Long
        p_poly = VBA.CLng(AddressOf poly)
    End Function

'min
Function min(ByRef a As Variant, ByRef b As Variant) As Variant
    min = IIf(a < b, a, b)
End Function
    Function p_min() As Long
        p_min = VBA.CLng(AddressOf min)
    End Function

'max
Function max(ByRef a As Variant, ByRef b As Variant) As Variant
    max = IIf(a < b, b, a)
End Function
    Function p_max() As Long
        p_max = VBA.CLng(AddressOf max)
    End Function
    
'述語 less
Function less(ByRef a As Variant, ByRef b As Variant) As Variant
    less = IIf(a < b, 1&, 0&)
End Function
    Function p_less() As Long
        p_less = VBA.CLng(AddressOf less)
    End Function

'述語 great
Function great(ByRef a As Variant, ByRef b As Variant) As Variant
    great = IIf(a > b, 1&, 0&)
End Function
    Function p_great() As Long
        p_great = VBA.CLng(AddressOf great)
    End Function
