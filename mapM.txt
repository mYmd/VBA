Option Explicit

'ひとつの引数を与える関数適用関数  引数に対して関数を適用する
' applyFun(x, f)   ->   f(x)
Function applyFun(ByRef param As Variant, ByRef func As Variant) As Variant
    applyFun = simple_invoke(func, param)
End Function
    
    Function p_applyFun() As Long
        p_applyFun = VBA.CLng(AddressOf applyFun)
    End Function

'第1引数を与える関数適用関数 : 第2引数は関数にバインドしている
' applyAs1st(x, [f, b])   ->    f(x, b)
Function applyAs1st(ByRef param As Variant, ByRef func As Variant) As Variant
    applyAs1st = simple_invoke(func(LBound(func)), param, func(1 + LBound(func)))
End Function
    
    Function p_applyAs1st() As Long
        p_applyAs1st = VBA.CLng(AddressOf applyAs1st)
    End Function

'第2引数を与える関数適用関数 : 第1引数は関数にバインドしている
' applyAs2nd(x, [f, a])   ->    f(a, x)
Function applyAs2nd(ByRef param As Variant, ByRef func As Variant) As Variant
    applyAs2nd = simple_invoke(func(LBound(func)), func(1 + LBound(func)), param)
End Function

    Function p_applyAs2nd() As Long
        p_applyAs2nd = VBA.CLng(AddressOf applyAs2nd)
    End Function

'ふたつの引数を与える関数適用関数 : 配列にパックした引数を展開する
' applyTogether([x, y], f)     ->    f(x, y)
Function applyTogether(ByRef params As Variant, ByRef func As Variant) As Variant
    applyTogether = simple_invoke(func, params(LBound(params)), params(1 + LBound(params)))
End Function

    Function p_applyTogether() As Long
        p_applyTogether = VBA.CLng(AddressOf applyTogether)
    End Function

'関数に引数を代入する関数
' setParam(f, x)     ->    f(x)
Function setParam(ByRef func As Variant, ByRef param As Variant) As Variant
    setParam = simple_invoke(func, param)
End Function

    Function p_setParam() As Long
        p_setParam = VBA.CLng(AddressOf setParam)
    End Function

'関数に第1引数を代入する関数 : 第2引数は関数にバインドしている
' set1stParam([f, a], x)     ->    f(x, a)
Function set1stParam(ByRef func As Variant, ByRef param As Variant) As Variant
    set1stParam = simple_invoke(func(LBound(func)), param, func(1 + LBound(func)))
End Function

    Function p_set1stParam() As Long
        p_set1stParam = VBA.CLng(AddressOf set1stParam)
    End Function

'関数に第2引数を代入する関数 : 第1引数は関数にバインドしている
' set2ndParam([f, a], x)     ->    f(a, x)
Function set2ndParam(ByRef func As Variant, ByRef param As Variant) As Variant
    set2ndParam = simple_invoke(func(LBound(func)), func(1 + LBound(func)), param)
End Function

    Function p_set2ndParam() As Long
        p_set2ndParam = VBA.CLng(AddressOf set2ndParam)
    End Function

'関数にふたつの引数を代入する関数 : 配列にパックした引数を展開する
' setBothParams(f, [x, y])     ->    f(x, y)
Function setBothParams(ByRef func As Variant, ByRef params As Variant) As Variant
    setBothParams = simple_invoke(func, params(LBound(params)), params(1 + LBound(params)))
End Function

    Function p_setBothParams() As Long
        p_setBothParams = VBA.CLng(AddressOf setBothParams)
    End Function


'============================================================================
'============================================================================

'指数関数
Function expN(ByRef elem As Variant, ByRef dummy As Variant) As Variant
    expN = Exp(elem)
End Function
    
    Function p_exp() As Long
        p_exp = VBA.CLng(AddressOf expN)
    End Function

'対数関数
Function logN(ByRef elem As Variant, Optional ByRef check As Variant = vbFalse) As Variant
    If IsMissing(check) Then
        logN = Log(elem)
    ElseIf check <> vbFalse Then
        If IsNumeric(elem) Then
            If 0 < elem Then
                logN = Log(elem)
            Else
                logN = 0
            End If
        Else
            logN = 0
        End If
    Else
        logN = Log(elem)
    End If
End Function
    
    Function p_log() As Long
        p_log = VBA.CLng(AddressOf logN)
    End Function

'加算
Function plus(ByRef elem As Variant, ByRef a As Variant) As Variant
    If IsNumeric(elem) And IsNumeric(a) Then
        plus = elem + a
    End If
End Function
    
    Function p_plus() As Long
        p_plus = VBA.CLng(AddressOf plus)
    End Function

'減算
Function minus(ByRef elem As Variant, ByRef a As Variant) As Variant
    If IsNumeric(elem) And IsNumeric(a) Then
        minus = elem - a
    End If
End Function
    
    Function p_minus() As Long
        p_minus = VBA.CLng(AddressOf minus)
    End Function

'乗算
Function mult(ByRef elem As Variant, ByRef a As Variant) As Variant
    If IsNumeric(elem) And IsNumeric(a) Then
        mult = elem * a
    End If
End Function
    
    Function p_mult() As Long
        p_mult = VBA.CLng(AddressOf mult)
    End Function

'除算
Function divide(ByRef elem As Variant, ByRef a As Variant) As Variant
    If IsNumeric(elem) And IsNumeric(a) Then
        divide = elem / a
    End If
End Function
    
    Function p_divide() As Long
        p_divide = VBA.CLng(AddressOf divide)
    End Function

'多項式　（係数は高次->低次）
Function poly(ByRef elem As Variant, ByRef coef As Variant) As Variant
    Dim z As Variant
    poly = 0
    For Each z In coef:    poly = poly * elem + z:      Next z
End Function
    
    Function p_poly() As Long
        p_poly = VBA.CLng(AddressOf poly)
    End Function

'2点間の距離
Function distance(ByRef x As Variant, Optional ByRef y As Variant) As Variant
    Dim i As Long
    
    distance = 0#
    If IsMissing(y) Then
        For i = 0 To sizeof(x) - 1 Step 1
            distance = distance + x(i + LBound(x)) ^ 2
        Next i
    Else
        For i = 0 To sizeof(x) - 1 Step 1
            distance = distance + (x(i + LBound(x)) - y(i + LBound(y))) ^ 2
        Next i
    End If
    distance = distance ^ 0.5
End Function
    
    Function p_distance() As Long
        p_distance = VBA.CLng(AddressOf distance)
    End Function

'乱数
Function vbRand(ByRef from_ As Variant, ByRef to_ As Variant) As Variant
    vbRand = (to_ - from_) * Rnd() + from_
End Function
    
    Function p_rnd() As Long
        p_rnd = VBA.CLng(AddressOf vbRand)
    End Function

'min
Function min(ByRef a As Variant, ByRef b As Variant) As Variant
    min = IIf(a < b, a, b)
End Function
    
    Function p_min() As Long
        p_min = VBA.CLng(AddressOf min)
    End Function

'max
Function max(ByRef a As Variant, ByRef b As Variant) As Variant
    max = IIf(a < b, b, a)
End Function
    
    Function p_max() As Long
        p_max = VBA.CLng(AddressOf max)
    End Function
    
'述語 less
Function less(ByRef a As Variant, ByRef b As Variant) As Variant
    less = IIf(a < b, 1&, 0&)
End Function
    
    Function p_less() As Long
        p_less = VBA.CLng(AddressOf less)
    End Function

'述語 great
Function great(ByRef a As Variant, ByRef b As Variant) As Variant
    great = IIf(a > b, 1&, 0&)
End Function
    
    Function p_great() As Long
        p_great = VBA.CLng(AddressOf great)
    End Function

'=======================================================================
'フィボナッチ関数   (0,1)->(1,1)->(1,2)->(2,3)->(3,5)->(5,8)-> ...
Function fibonacci(ByRef a As Variant, ByRef b As Variant) As Variant
    fibonacci = Array(b, a + b)
End Function
    
    Function p_fibonacci() As Long
        p_fibonacci = VBA.CLng(AddressOf fibonacci)
    End Function

'ロジスティック写像   (Xn, r)->Xn+1
Function Logistic(ByRef x As Variant, ByRef r As Variant) As Variant
    Logistic = r * x * (1 - x)
End Function
    
    Function p_Logistic() As Long
        p_Logistic = VBA.CLng(AddressOf Logistic)
    End Function
