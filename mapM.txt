Option Explicit

'********************************************************************
'   関数型プログラム
'   Function bindFun            関数の部分適用
'   Function bind1st            1番目の引数を束縛
'   Function bind2nd            2番目の引数を束縛
'   Function applyFun           関数適用関数
'   Function setParam           関数に引数を代入
'   Function foldl_Funs
'   Function scanl_Funs
'   Function foldr_Funs
'   Function scanr_Funs
'   Function applyFun2by2
'   Function setParam2by2
'********************************************************************

'関数の部分適用
'bindFun(func)                              引数の束縛なし
'bindFun(func, firstParam)                  1番目の引数を束縛
'bindFun(func, , secondParam)               2番目の引数を束縛
'bindFun(func, firstParam, secondParam)     両方の引数を束縛（遅延評価）
Function bindFun(ByVal func As Long, Optional ByRef firstParam As Variant, Optional ByRef secondParam As Variant) As Variant
    bindFun = VBA.Array(func, _
                        IIf(IsMissing(firstParam), placeholder, firstParam), _
                        IIf(IsMissing(secondParam), placeholder, secondParam), _
                        placeholder _
                       )
End Function

'bindされた関数であることの判定
Private Function is_bindFun(ByRef val As Variant) As Boolean
    is_bindFun = False
    If Dimension(val) = 1 And sizeof(val) = 4 Then is_bindFun = is_placeholder(val(3))
End Function

'プレースホルダの位置
Private Function placeholderPosition(ByRef val As Variant) As Long
    placeholderPosition = IIf(is_placeholder(val(1)), 1, 0) + IIf(is_placeholder(val(2)), 2, 0)
End Function

'1番目の引数の束縛(bindFuncの構文糖)
Function bind1st(ByVal func As Variant, Optional ByRef firstParam As Variant) As Variant
    bind1st = bindFun(func, firstParam)
End Function
    
'2番目の引数の束縛(bindFuncの構文糖)
Function bind2nd(ByVal func As Variant, Optional ByRef secondParam As Variant) As Variant
    bind2nd = bindFun(func, , secondParam)
End Function



'関数適用関数  引数に対して関数を適用する   関数はplaceholderをプレースホルダとした簡易Bind式
' applyFun(x     ,  Null          )      ->  x
' applyFun(x     ,  Empty         )      ->  x
' applyFun(x     , (f, a, b)      )      ->  f(a, b)
' applyFun(x     , (f, a, placeholder) ) ->  f(a, x)
' applyFun(x     , (f, placeholder, b) ) ->  f(x, b)
' applyFun((x, y), (f, placeholder, placeholder))  ->  f(x, y)
' applyFun(x     ,  f             )      ->  f(x)
Function applyFun(ByRef param As Variant, ByRef func As Variant) As Variant
    If IsNull(func) Or IsEmpty(func) Then
        applyFun = param
    ElseIf is_bindFun(func) Then
        Select Case placeholderPosition(func)
        Case 0  '(f)
            applyFun = simple_invoke(func(0), func(1), func(2))
        Case 1  ' (f, placeholder, b)
            applyFun = simple_invoke(func(0), param, func(2))
        Case 2  ' (f, a, placeholder)
            applyFun = simple_invoke(func(0), func(1), param)
        Case 3  ' (f, placeholder, placeholder)
            applyFun = simple_invoke(func(0), param(LBound(param)), param(1 + LBound(param)))
        End Select
    Else
        applyFun = simple_invoke(func, param)
    End If
End Function
    Function p_applyFun() As Long
        p_applyFun = VBA.CLng(AddressOf applyFun)
    End Function

'関数に引数を代入する関数
' setParam(f              , x     )  ->  f(x)
' setParam((f, a, placeholder), x )  ->  f(a, x)
' setParam((f, placeholder, b), x )  ->  f(x, b)
' setParam((f, placeholder, placeholder), (x, y))  ->  f(x, y)
Function setParam(ByRef func As Variant, ByRef param As Variant) As Variant
    setParam = applyFun(param, func)
End Function
    Function p_setParam() As Long
        p_setParam = VBA.CLng(AddressOf setParam)
    End Function

'関数合成（foldl）
Function foldl_Funs(ByRef init As Variant, ByRef funcArray As Variant) As Variant
    foldl_Funs = foldl(AddressOf applyFun, init, funcArray)
End Function
    Function p_foldl_Funs() As Long
        p_foldl_Funs = VBA.CLng(AddressOf foldl_Funs)
    End Function

'関数合成（scanl）
Function scanl_Funs(ByRef init As Variant, ByRef funcArray As Variant) As Variant
    scanl_Funs = scanl(AddressOf applyFun, init, funcArray)
End Function
    Function p_scanl_Funs() As Long
        p_scanl_Funs = VBA.CLng(AddressOf scanl_Funs)
    End Function

'関数合成（foldr）
Function foldr_Funs(ByRef init As Variant, ByRef funcArray As Variant) As Variant
    foldr_Funs = foldr(AddressOf setParam, init, funcArray)
End Function
    Function p_foldr_Funs() As Long
        p_foldr_Funs = VBA.CLng(AddressOf foldr_Funs)
    End Function

'関数合成（scanr）
Function scanr_Funs(ByRef init As Variant, ByRef funcArray As Variant) As Variant
    scanr_Funs = foldr(AddressOf setParam, init, funcArray)
End Function
    Function p_scanr_Funs() As Long
        p_scanr_Funs = VBA.CLng(AddressOf scanr_Funs)
    End Function

'((x, y), (f1, f2))  に対して  Array(f1(x, y), f2(x, y))     を返す
Function applyFun2by2(ByRef params As Variant, ByRef funcs As Variant) As Variant
    applyFun2by2 = VBA.Array( _
          simple_invoke(funcs(LBound(funcs)), params(LBound(params)), params(1 + LBound(params))) _
        , simple_invoke(funcs(1 + LBound(funcs)), params(LBound(params)), params(1 + LBound(params))) _
                     )
End Function
    Function p_applyFun2by2() As Long
        p_applyFun2by2 = VBA.CLng(AddressOf applyFun2by2)
    End Function

'((f1, f2), (x, y))  に対して  Array(f1(x, y), f2(x, y))     を返す
Function setParam2by2(ByRef funcs As Variant, ByRef params As Variant) As Variant
    setParam2by2 = applyFun2by2(params, funcs)
End Function
    Function p_setParam2by2() As Long
        p_setParam2by2 = VBA.CLng(AddressOf setParam2by2)
    End Function


'********************************************************************
'   要素アクセス
'   Function firstArg           1番目の引数
'   Function secondArg          2番目の引数
'   Function getNth             N番目の配列要素
'********************************************************************
'1番目の引数
Function firstArg(ByRef a As Variant, ByRef b As Variant) As Variant
    firstArg = a
End Function
    Function p_firstArg() As Long
        p_firstArg = VBA.CLng(AddressOf firstArg)
    End Function

'2番目の引数
Function secondArg(ByRef a As Variant, ByRef b As Variant) As Variant
    secondArg = b
End Function
    Function p_secondArg() As Long
        p_secondArg = VBA.CLng(AddressOf secondArg)
    End Function

'N番目の配列要素
Function getNth(ByRef index As Variant, ByRef matrix As Variant) As Variant
    getNth = matrix(index)
End Function
    Function p_getNth() As Long
        p_getNth = VBA.CLng(AddressOf getNth)
    End Function

'********************************************************************
'     ファンクタ等
'   Function if_else        if else 選択
'   Function replaceNull    Nullを他の値に置換する
'   Function replaceEmpty   Emptyを他の値に置換する
'   Function expN           指数関数
'   Function logN           対数関数
'   Function pow            累乗
'   Function plus           加算
'   Function minus          減算
'   Function mult           乗算
'   Function divide         除算
'   Function poly           多項式
'   Function min            min
'   Function max            max
'   Function equal          述語 Equal
'   Function notEqual       述語 Not Equal
'   Function less           述語 less
'   Function great          述語 great
'********************************************************************

'選択   if_else(値, [判定値(関数), 真の時の変換値(関数), 偽の時の変換値(関数)])
Function if_else(ByRef val As Variant, ByRef transformer As Variant) As Variant
    Dim lb As Long
    Dim check As Boolean
    
    lb = LBound(transformer)
    If is_bindFun(transformer(lb)) Then
        check = applyFun(val, transformer(lb))
    Else
        check = (val = transformer(lb))
    End If
    If check Then
        If is_bindFun(transformer(1 + lb)) Then
            if_else = applyFun(val, transformer(1 + lb))
        Else
            if_else = transformer(1 + lb)
        End If
    Else
        If is_bindFun(transformer(2 + lb)) Then
            if_else = applyFun(val, transformer(2 + lb))
        Else
            if_else = transformer(2 + lb)
        End If
    End If
    If is_placeholder(if_else) Then if_else = val
End Function
    Function p_if_else() As Long
        p_if_else = VBA.CLng(AddressOf if_else)
    End Function

'Nullを他の値に置換する
Function replaceNull(ByRef x As Variant, ByRef alt As Variant) As Variant
    If IsNull(x) Then
        replaceNull = alt
    Else
        replaceNull = x
    End If
End Function
    Function p_replaceNull() As Long
        p_replaceNull = VBA.CLng(AddressOf replaceNull)
    End Function

'Emptyを他の値に置換する
Function replaceEmpty(ByRef x As Variant, ByRef alt As Variant) As Variant
    If IsEmpty(x) Then
        replaceEmpty = alt
    Else
        replaceEmpty = x
    End If
End Function
    Function p_replaceEmpty() As Long
        p_replaceEmpty = VBA.CLng(AddressOf replaceEmpty)
    End Function


'指数関数
Function expN(ByRef elem As Variant, ByRef dummy As Variant) As Variant
    expN = Exp(elem)
End Function
    Function p_exp() As Long
        p_exp = VBA.CLng(AddressOf expN)
    End Function

'対数関数
Function logN(ByRef elem As Variant, Optional ByRef dummy As Variant) As Variant
    logN = Log(elem)
End Function
    Function p_log() As Long
        p_log = VBA.CLng(AddressOf logN)
    End Function

'加算
Function plus(ByRef elem As Variant, ByRef a As Variant) As Variant
    If IsNumeric(elem) And IsNumeric(a) Then
        plus = elem + a
    End If
End Function
    Function p_plus() As Long
        p_plus = VBA.CLng(AddressOf plus)
    End Function

'減算
Function minus(ByRef elem As Variant, ByRef a As Variant) As Variant
    If IsNumeric(elem) And IsNumeric(a) Then
        minus = elem - a
    End If
End Function
    Function p_minus() As Long
        p_minus = VBA.CLng(AddressOf minus)
    End Function

'乗算
Function mult(ByRef elem As Variant, ByRef a As Variant) As Variant
    If IsNumeric(elem) And IsNumeric(a) Then
        mult = elem * a
    End If
End Function
    Function p_mult() As Long
        p_mult = VBA.CLng(AddressOf mult)
    End Function

'除算
Function divide(ByRef elem As Variant, ByRef a As Variant) As Variant
    If IsNumeric(elem) And IsNumeric(a) Then
        divide = elem / a
    End If
End Function
    Function p_divide() As Long
        p_divide = VBA.CLng(AddressOf divide)
    End Function
    
'剰余
Function modN(ByRef elem As Variant, ByRef a As Variant) As Variant
    modN = elem Mod a
End Function
    Function p_mod() As Long
        p_mod = VBA.CLng(AddressOf modN)
    End Function

'多項式　（係数は高次->低次）
Function poly(ByRef x As Variant, ByRef coef As Variant) As Variant
    poly = foldr1(p_plus, zipWith(p_mult, coef, scanr(p_mult, 1, repeat(x, sizeof(coef) - 1))))
End Function
    Function p_poly() As Long
        p_poly = VBA.CLng(AddressOf poly)
    End Function

'min
Function min(ByRef a As Variant, ByRef b As Variant) As Variant
    min = IIf(a < b, a, b)
End Function
    Function p_min() As Long
        p_min = VBA.CLng(AddressOf min)
    End Function

'max
Function max(ByRef a As Variant, ByRef b As Variant) As Variant
    max = IIf(a < b, b, a)
End Function
    Function p_max() As Long
        p_max = VBA.CLng(AddressOf max)
    End Function
    
'述語 equal
Function equal(ByRef a As Variant, ByRef b As Variant) As Variant
    equal = IIf(a = b, 1, 0)
End Function
    Function p_equal() As Long
        p_equal = VBA.CLng(AddressOf equal)
    End Function

'述語 not equal
Function notEqual(ByRef a As Variant, ByRef b As Variant) As Variant
    notEqual = IIf(a = b, 0, 1)
End Function
    Function p_notEqual() As Long
       p_notEqual = VBA.CLng(AddressOf notEqual)
    End Function

'述語 less
Function less(ByRef a As Variant, ByRef b As Variant) As Variant
    less = IIf(a < b, 1&, 0&)
End Function
    Function p_less() As Long
        p_less = VBA.CLng(AddressOf less)
    End Function

'述語 great
Function great(ByRef a As Variant, ByRef b As Variant) As Variant
    great = IIf(a > b, 1&, 0&)
End Function
    Function p_great() As Long
        p_great = VBA.CLng(AddressOf great)
    End Function
