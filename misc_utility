Attribute VB_Name = "misc_utility"
'misc_utility
'Copyright (c) 2016 mmYYmmdd
Option Explicit

'*********************************************************************************
'   ユーティリティ
'*********************************************************************************
'   Function  p_foldl1                      1次元配列のfoldl1
'   Function  p_foldr1                      1次元配列のfoldr1
'   Function  p_scanl1                      1次元配列のscanl1
'   Function  p_scanr1                      1次元配列のscanr1
'   Function  subM_R                        subM(m, 行範囲) の構文糖
'   Function  subM_C                        subM(m, , 列範囲) の構文糖
'   Function  adjacent_op                   1次元配列vecの隣接する要素間で2項操作
'   Function  equal_all                     1次元配列の全要素の等値比較
'   Function  equal_all_pred                〃　述語バージョン
'  -----------------------------------------------------------------------------
'   Function  group_by_partition_points     partition_points によるGROUP-BY
'   Function  summaryUnit                   個々の集計行範囲の処理
'   Function  str2SummaryFun                集計関数を表す文字列を関数列に変換
'  -----------------------------------------------------------------------------
'
'*********************************************************************************

' 1次元配列限定の foldl1 (p_foldl1 のみPublic)
    Private Function foldl1_v(ByRef fun As Variant, ByRef vec As Variant) As Variant
        foldl1_v = foldl1(fun, vec)
    End Function
Public Function p_foldl1(Optional ByRef firstParam As Variant, Optional ByRef secondParam As Variant) As Variant
    p_foldl1 = make_funPointer(AddressOf foldl1_v, firstParam, secondParam)
End Function

' 1次元配列限定の foldr1 (p_foldr1 のみPublic)
    Private Function foldr1_v(ByRef fun As Variant, ByRef vec As Variant) As Variant
        foldr1_v = foldr1(fun, vec)
    End Function
Public Function p_foldr1(Optional ByRef firstParam As Variant, Optional ByRef secondParam As Variant) As Variant
    p_foldr1 = make_funPointer(AddressOf foldr1_v, firstParam, secondParam)
End Function

' 1次元配列限定の scanl1 (p_scanl1 のみPublic)
    Private Function scanl1_v(ByRef fun As Variant, ByRef vec As Variant) As Variant
        scanl1_v = scanl1(fun, vec)
    End Function
Public Function p_scanl1(Optional ByRef firstParam As Variant, Optional ByRef secondParam As Variant) As Variant
    p_scanl1 = make_funPointer(AddressOf scanl1_v, firstParam, secondParam)
End Function

' 1次元配列限定の scanr1 (p_scanr1 のみPublic)
    Private Function scanr1_v(ByRef fun As Variant, ByRef vec As Variant) As Variant
        scanr1_v = scanr1(fun, vec)
    End Function
Public Function p_scanr1(Optional ByRef firstParam As Variant, Optional ByRef secondParam As Variant) As Variant
    p_scanr1 = make_funPointer(AddressOf scanr1_v, firstParam, secondParam)
End Function

' subM(m, 行範囲) の構文糖
Public Function subM_R(ByRef m As Variant, ByRef rRange As Variant) As Variant
    subM_R = subM(m, rRange)
End Function
    Public Function p_subM_R(Optional ByRef firstParam As Variant, Optional ByRef secondParam As Variant) As Variant
        p_subM_R = make_funPointer(AddressOf subM_R, firstParam, secondParam)
    End Function

' subM(m, , 列範囲) の構文糖
Public Function subM_C(ByRef m As Variant, ByRef cRange As Variant) As Variant
    subM_C = subM(m, , cRange)
End Function
    Public Function p_subM_C(Optional ByRef firstParam As Variant, Optional ByRef secondParam As Variant) As Variant
        p_subM_C = make_funPointer(AddressOf subM_C, firstParam, secondParam)
    End Function

' 1次元配列vecの隣接する要素間で2項操作opを行う
' 出力列の要素数は元の要素数 - 1   (LBound = 0)
Public Function adjacent_op(ByRef op As Variant, ByRef vec As Variant) As Variant
    If is_bindFun(op) Then
        adjacent_op = zipWith(op, vec, tailN(vec, sizeof(vec) - 1))
    End If
End Function
    Public Function p_adjacent_op(Optional ByRef firstParam As Variant, Optional ByRef secondParam As Variant) As Variant
        p_adjacent_op = make_funPointer(AddressOf adjacent_op, firstParam, secondParam)
    End Function

' 1次元配列の全要素の等値比較
Public Function equal_all(ByRef a As Variant, ByRef b As Variant) As Variant
    equal_all = equal_all_pred(p_equal, a, b)
End Function
    Public Function p_equal_all(Optional ByRef firstParam As Variant, Optional ByRef secondParam As Variant) As Variant
        p_equal_all = make_funPointer(AddressOf equal_all, firstParam, secondParam)
    End Function

' 1次元配列の全要素の等値比較（述語バージョン）
Public Function equal_all_pred(ByRef pred As Variant, ByRef a As Variant, ByRef b As Variant) As Variant
    If sizeof(a) = sizeof(b) Then
        equal_all_pred = IIf(sizeof(a) <= find_pred(p_equal(0), zipWith(pred, a, b)), _
                             1, _
                             0)
    Else
        equal_all_pred = 0
    End If
End Function

' partition_points によるGROUP-BY
' m         : 対象配列（2次元配列またはJAG配列）
' pp        : partition_points （集計する行範囲を区切る行番号の集合）
' strFuns   : 列ごとの集計関数を表す文字列
' my_str2Fun: 文字列から集計関数へのマッピング関数（str2SummaryFunがデフォルト）
' 例）group_by_partition_points(m, pp, "%t%c%s%a%min%max")
Public Function group_by_partition_points(ByRef m As Variant, _
                                          ByRef pp As Variant, _
                                          ByVal strFuns As String, _
                                 Optional ByVal my_str2Fun As Variant) As Variant
    If left(strFuns, 1) = "%" Then strFuns = right(strFuns, Len(strFuns) - 1)
    If IsMissing(my_str2Fun) Then my_str2Fun = p_str2SummaryFun     'デフォルトの
    Dim funs As Variant
    funs = mapF(my_str2Fun, Split(strFuns, "%"))
    Dim intervals As Variant
    intervals = adjacent_op(p_a__o, pp)
    Dim ranges As Variant
    ranges = mapF_swap(p_subM_R, m, intervals)
    group_by_partition_points = unzip(mapF(p_summaryUnit(, funs), ranges), 2)
End Function
    
' 個々の集計行範囲の処理
Public Function summaryUnit(ByRef m As Variant, ByRef funs As Variant) As Variant
    Select Case Dimension(m)
        Case 1: summaryUnit = zipWith(p_applyFun, unzip(m, 1), funs)
        Case 2: summaryUnit = zipWith(p_applyFun, zipR(m), funs)
    End Select
End Function
    Public Function p_summaryUnit(Optional ByRef firstParam As Variant, Optional ByRef secondParam As Variant) As Variant
        p_summaryUnit = make_funPointer(AddressOf summaryUnit, firstParam, secondParam)
    End Function

' 集計関数を表す文字列（%の後に書いて繋げる）を関数列に変換
' 独自の変換関数を書くときはCase Else の中でこの関数を呼び出す形にするといいかも
' %t %tp  %top      : 先頭
' %b %btm %bottom   : 末尾
' %c %cnt %count    : 個数
' %s %sum %計       : 合計
' %a %avg %average  : 平均
' %max              : 最大
' %min              : 最少
Public Function str2SummaryFun(ByRef s As Variant, Optional ByRef other As Variant) As Variant
    Select Case StrConv(s, vbNarrow + vbLowerCase)
        Case "t", "tp", "top"
            str2SummaryFun = p_getNth_b(0)
        Case "b", "btm", "bottom"
            str2SummaryFun = p_getNth_b(-1)
        Case "c", "cnt", "count"
            str2SummaryFun = p_sizeof()
        Case "s", "sum", "計"
            str2SummaryFun = p_foldl1(p_plus(yield_1, yield_2))
        Case "a", "avg", "average"
            str2SummaryFun = p_divide(p_foldl1(p_plus(yield_1, yield_2)), p_sizeof)
        Case "max"
            str2SummaryFun = p_foldl1(p_max(yield_1, yield_2))
        Case "min"
            str2SummaryFun = p_foldl1(p_min(yield_1, yield_2))
        Case Else
            str2SummaryFun = p_constant(other)
    End Select
End Function
    Public Function p_str2SummaryFun(Optional ByRef firstParam As Variant, Optional ByRef secondParam As Variant) As Variant
        p_str2SummaryFun = make_funPointer(AddressOf str2SummaryFun, firstParam, secondParam)
    End Function
